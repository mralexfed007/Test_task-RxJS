{"version":3,"sources":["App.js","index.js"],"names":["App","useState","sec","setSec","status","setStatus","timer","setTimer","clickCount","setClickCount","buttonName","setButtonName","useEffect","clearInterval","Observable","observer","complete","console","log","setInterval","val","subscribe","start","useCallback","reset","wait","setTimeout","Date","toISOString","slice","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAGe,SAASA,IACtB,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAoCN,mBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAoCR,mBAAS,SAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACJJ,GAAc,GAChBH,EAAU,UAEX,CAACG,IACJI,qBAAU,WACRC,cAAcP,GACK,IAAIQ,KAAW,SAAAC,GAChB,SAAXX,GACHS,cAAcP,GACdS,EAASC,WACTC,QAAQC,IAAI,SACQ,QAAXd,GACPG,EAASY,aAAY,WACnBhB,GAAO,SAAAiB,GAAG,OAAIA,EAAM,OACpBH,QAAQC,IAAI,SACb,SAGIG,UAAU,CACnBL,SAAU,WACRC,QAAQC,IAAI,iBAGf,CAACd,IAEJ,IAAMkB,EAAQC,uBAAY,WACL,UAAfb,GACFC,EAAc,QACdN,EAAU,SAEVM,EAAc,SACdN,EAAU,QACVF,EAAO,MAER,CAACO,IAEEc,EAAQD,uBAAY,WACxBpB,EAAO,GACPE,EAAU,SACT,IAEGoB,EAAOF,uBAAY,WACvBd,GAAc,SAAAW,GAAG,OAAIA,EAAM,KAC3BM,YAAW,WACTjB,EAAc,KACb,OACF,IAEH,OACE,gCACE,qCAAQ,IAAIkB,KAAKzB,GAAK0B,cAAcC,MAAM,GAAI,OAC9C,wBAAQC,UAAU,eAAeC,QAAST,EAA1C,SACGZ,IAEH,wBAAQqB,QAASP,EAAjB,mBACA,wBAAQO,QAASN,EAAjB,qBC9DNO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClC,EAAD,MAEFmC,SAASC,eAAe,W","file":"static/js/main.556b8476.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { Observable } from 'rxjs';\n \nexport default function App() {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState('stop');\n  const [timer, setTimer] = useState('');\n  const [clickCount, setClickCount] = useState(0);\n  const [buttonName, setButtonName] = useState('Start')\n \n  useEffect(() => {\n    if (clickCount >= 2) {\n      setStatus('wait');\n    }\n  }, [clickCount])\n  useEffect(() => {\n    clearInterval(timer)\n    const stopWatch$ = new Observable(observer => {\n       if (status === 'stop') {\n        clearInterval(timer);\n        observer.complete()\n        console.log('stop')\n      } else if (status === 'run') {\n          setTimer(setInterval(() => {\n            setSec(val => val + 1000);\n            console.log('run')      \n        }, 1000));\n      }\n    });\n    stopWatch$.subscribe({\n      complete: () => {\n        console.log('complete')\n      }\n    })\n  }, [status]);\n \n  const start = useCallback(() => {\n    if (buttonName === 'Start') {\n      setButtonName('Stop');\n      setStatus('run')\n    } else {\n      setButtonName('Start');\n      setStatus('stop')\n      setSec(0);\n    }\n  }, [buttonName]);\n \n  const reset = useCallback(() => {\n    setSec(0);\n    setStatus('run');\n  }, []);\n \n  const wait = useCallback(() => {\n    setClickCount(val => val + 1)\n    setTimeout(() => {\n      setClickCount(0)\n    }, 300);\n  }, []);\n \n  return (\n    <div>\n      <span> {new Date(sec).toISOString().slice(11, 19)}</span>\n      <button className=\"start-button\" onClick={start}>\n        {buttonName}\n      </button>\n      <button onClick={reset}>Reset</button>\n      <button onClick={wait}>Wait</button>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}